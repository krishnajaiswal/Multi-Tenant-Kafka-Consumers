# Species the broker server running. If we have multiple server then it will be added using comma after localhost:9092.
spring.kafka.cosumer.bootstrap-servers: localhost:9092
# specifies a unique string that identifies the consumer group this consumer belongs to.
spring.kafka.consumer.group-id: myGroup
# specifies what to do when there is no initial offset in Kafka or if the current offset does not exist anymore on the server (e.g. because that data has been deleted).
spring.kafka.consumer.auto-offset-reset: earliest
spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.kafka.producer.bootstrap-servers: localhost:9092
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

spring.kafka.nashtech.topic.name=salary.multinenant_nashtech
spring.kafka.knoldus.topic.name=salary.multinenant_knoldus
spring.kafka.amway.topic.name=salary.multinenant_amway
kafka.topic.prefix=salary.multinenant_
kafka.topic.groupId=myGroup
